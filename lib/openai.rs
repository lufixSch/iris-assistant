use log::debug;
use serde::{Deserialize, Serialize};

/// Represents a message in the OpenAI API.
#[derive(Serialize, Deserialize)]
pub struct OpenAIMessage {
    /// The role of the message sender (e.g., "system", "user", "assistant").
    pub role: String,
    /// The content of the message.
    pub content: String,
}

/// Represents a request to the OpenAI API for chat completions.
#[derive(Serialize, Deserialize)]
pub struct OpenAIRequest {
    /// The model to use for generating the completion.
    pub model: String,
    /// A list of messages that make up the conversation history.
    pub messages: Vec<OpenAIMessage>,
    /// Whether to stream the response or not.
    pub stream: bool,
}

/// Represents a response from the OpenAI API for chat completions.
#[derive(Serialize, Deserialize)]
pub struct OpenAIResponse {
    /// A unique identifier for the request.
    pub id: String,
    /// The type of object returned (e.g., "chat.completion").
    pub object: String,
    /// A timestamp indicating when the response was created.
    pub created: i32,
    /// The model that generated the completion.
    pub model: String,
    /// A list of choices, each containing a message in the completion.
    pub choices: Vec<OpenAIChoices>,
}

/// Represents a choice in the OpenAI API response, containing a single message.
#[derive(Serialize, Deserialize)]
pub struct OpenAIChoices {
    /// The message generated by the model.
    pub message: OpenAIMessage,
}

/// Sends a chat completion request to the OpenAI API and returns the response.
///
/// # Arguments
///
/// * `req` - A reference to an `OpenAIRequest` containing the request parameters.
/// * `api_key` - The API key for authentication with the OpenAI API.
/// * `api_base` - The base URL for the OpenAI API endpoint.
///
/// # Returns
///
/// An `OpenAIResponse` containing the model's response to the chat completion request.
pub fn chat_completion(req: &OpenAIRequest, api_key: &str, api_base: &str) -> OpenAIResponse {
    debug!("Execute Chat Completions to: {}", api_base);

    let client = reqwest::blocking::Client::new();

    let res = client
        .post(format!("{api_base}/chat/completions"))
        .bearer_auth(api_key)
        .json(req)
        .send()
        .expect("OpenAI API request failed!");

    res.json()
        .expect("Deserialization of OpenAI response failed!")
}
